# Default values for masastack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # 针对开发环境使用的变量进行数据库区分使用 { dev  staging  demo  production }
  suffix_identity: "test"
  demo: false
  secretName: "masastack"
  domain: "masastack.com"
  image:
    repository: registry.cn-hangzhou.aliyuncs.com/masastack
    imagePullPolicy: Always
    # imagePullPolicy: IfNotPresent
    tag: "demo-1.0.0-rc2"

  sqlserver:
    ip: "10.130.0.235"
    id: "ss"
    port: "24878"
    password: "Hzss@123"

  redis: 
    ip: "10.130.0.235"
    db: "1"
    port: "24615"
    password: "Hzss@123"

  elastic:
    ip: "es-ydy-new.lonsid.cn"
    port: "9200"

  prometheus:
    ip: ""
    port: "9090"

  otel:
    ip: ""
    port: "9090"

  volumeclaims:
    enabled: true
    storageSize: "8Gi"
    storageClassName: kcs-efs 

pm:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "pm"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: pm-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: pm
    port: 443 
    nodeport: ""

dcc:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "dcc"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: dcc-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: dcc
    port: 443 
    nodeport: ""

auth:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "auth"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: auth-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: auth
    port: 443 
    nodeport: ""
  sso:
    replicas: 1
    name: auth-sso
    port: 443 
    nodeport: ""

mc:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "mc"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: mc-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: mc
    port: 443 
    nodeport: ""

alert:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "alert"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: alert-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: alert
    port: 443 
    nodeport: ""

tsc:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "tsc"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: tsc-service
    port: 80
    nodeport: ""
  ui:
    replicas: 1
    name: tsc
    port: 443 
    nodeport: ""

scheduler:
  image: 
    tag: ""
    pullPolicy: Always
  dbName: "scheduler"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "500Mi"
      cpu: "200m"
  server:
    replicas: 1
    name: scheduler-service
    port: 80
    nodeport: ""
  worker:
    replicas: 1
    name: scheduler-worker
    port: 80 
    nodeport: ""
  ui:
    replicas: 1
    name: scheduler
    port: 443 
    nodeport: ""

middleware-sqlserver:
  service:
    # type: NodePort
    type: ClusterIP
    port: 1433
    # nodePort: "30433"

middleware-redis:
  service:
    # type: NodePort
    type: ClusterIP
    port: 6379
    # nodePort: "30079"

middleware-prometheus:
  service:
    type: NodePort
    #type: ClusterIP
    port: 9090
    nodePort: "30094"

middleware-otel:
  service:
    # type: NodePort
    type: ClusterIP
    port: 9013
    # nodePort: "30013"

middleware-elastic:
  service:
    # type: NodePort
    type: ClusterIP
    port: 9200
    # nodePort: "30200"


ingress:
  secretName: ""