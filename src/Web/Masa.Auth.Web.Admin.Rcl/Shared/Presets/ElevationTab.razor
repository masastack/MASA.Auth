<CascadingValue Value="this">
    @ChildContent
    <div Class="@($"mx-auto d-flex flex-column {Class}")" Style="@Style">
        <div Class="d-flex justify-center">
            <MButtonGroup Dense=@Dense Mandatory Borderless Value="TabIndex" ValueChanged="TabChanged" Class="rounded-lg elevation-tab">
                @for (var i = 0; i < Headers.Count; i++)
                {
                    var header = Headers[i];
                    <MButton Ripple=false Value="@i" Class="rounded-lg" MinWidth=TabMinWidth>
                        @header
                    </MButton>
                }
            </MButtonGroup>
        </div>
        <MWindow @bind-Value="TabIndex" Reverse Class="@($"flex-grow-1 {TabWindowClass}")">
            @for (var i = 0; i < _elevationTabItems.Count; i++)
            {
                var item = _elevationTabItems[i];
                <MWindowItem Value="@i" Class="full-height">
                    @item.ChildContent
                </MWindowItem>
            }
        </MWindow>
    </div>
</CascadingValue>

@code {
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? TabWindowClass { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [EditorRequired]
    [Parameter]
    public List<string> Headers { get; set; } = new();

    [Parameter]
    public bool Dense { get; set; } = false;

    [Parameter]
    public StringNumber TabMinWidth { get; set; } = "100";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public StringNumber TabIndex { get; set; } = 0;

    [Parameter]
    public EventCallback<StringNumber> TabIndexChanged { get; set; }

    List<ElevationTabItem> _elevationTabItems = new();

    public void AddTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Add(tabItem);
    }

    public void RemoveTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Remove(tabItem);
    }

    private async Task TabChanged(StringNumber v)
    {
        if (TabIndexChanged.HasDelegate)
        {
            await TabIndexChanged.InvokeAsync(v);
        }
        else
        {
            TabIndex = v;
        }
    }
}
