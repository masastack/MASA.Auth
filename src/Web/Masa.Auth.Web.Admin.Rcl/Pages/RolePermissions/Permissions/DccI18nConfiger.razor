@using Masa.Auth.Contracts.Permissions
@using System.Text.Json;
@inherits AdminCompontentBase
@inject AuthCaller AuthCaller

<div class="i18n-configer">
    <STextField Value="Name" ValueChanged="NameChanged" ValueExpression="NameExpression"
                Required
                Label="Key"
                Action="@(props => { props.Content = T("DisplayName"); props.OnClick = _ => OpenConfigDialog(); })"
                Type="text"
                Suffix="@DT(Name)">
    </STextField>
</div>

<MDialog @bind-Value="_dialog" Width="400" Persistent>
    <MCard Class="pa-4">
        <MCardTitle Class="justify-center">
            @($"{Name}{T("DisplayName")}")
        </MCardTitle>
        <MCardText>
            @foreach (var _displayName in _displayNames)
            {
                <STextField Class="my-2" Label="@_displayName.Key" @bind-Value=_displayName.Value />
            }
        </MCardText>
        <MCardActions>
            <SButton Color="primary" Outlined Width="140"
                     OnClick="() => _dialog = false">
                @T("Cancel")
            </SButton>
            <MSpacer></MSpacer>
            <SButton Color="primary" Width="140"
                     OnClick="Save">
                @T("Ok")
            </SButton>
        </MCardActions>
    </MCard>
</MDialog>

@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> NameChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? NameExpression { get; set; }

    bool _dialog;
    List<PermissionI18NDisplayNameDto> _displayNames = new();

    private async Task OpenConfigDialog()
    {
        var cultureNames = I18n.SupportedCultures.Select(x => x.Name.ToLower()).ToList();
        _displayNames = await AuthCaller.PermissionService.GetI18NDisplayNameAsync(cultureNames, Name);
        _dialog = true;
    }

    private async Task Save()
    {
        var input = new SaveI18NDisplayNamesInput
            {
                DisplayNames = _displayNames,
                Name = Name
            };
        await AuthCaller.PermissionService.SaveI18NDisplayNameAsync(input);
        _dialog = false;
    }
}