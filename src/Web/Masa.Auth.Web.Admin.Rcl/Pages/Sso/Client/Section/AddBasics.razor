@inherits AdminCompontentBase

<MRow>
    <MCol Md=12 Class="text-center">
        <UploadAvatar @bind-Value="Dto.LogoUri" Avatar Size="80" WhenFileChangeUpload />
    </MCol>
    <MCol Md=6>
        <STextField Required @bind-Value="Dto.ClientId" Label="@T("ClientId")" Tooltip="@T("ClientIdTips")" />
    </MCol>
    <MCol Md=6>
        <STextField Required @bind-Value="Dto.ClientName" Label="@T("ClientName")" Tooltip="@T("ClientNameTips")" />
    </MCol>
    <MCol Md=6>
        <SUrlTextField @bind-Value="Dto.ClientUri" Label="@T("ClientUri")" />
    </MCol>
    <MCol Md=6>
        <MCheckbox @bind-Value="Dto.RequireConsent" Label="@T("RequireConsent")"></MCheckbox>
    </MCol>
</MRow>
<MRow>
    <MCol Md=6>
        <STextField @bind-Value="Dto.RedirectUri" Label="@T("CallBackRedirectUri")" Suffix="@redirectUriSuffix"
                          AppendOuterIcon="@IconConstants.Add" OnAppendOuterClick="AddCallBackRedirectUri" />
        @foreach (var uri in Dto.RedirectUris)
        {
            <div class="d-flex mt-3">
                <STextField Small HideDetails="true" Value="uri" Filled Disabled />
                <MIcon Class="ml-2" OnClick="()=>RemoveCallBackRedirectUri(uri)">mdi-close-circle</MIcon>
            </div>
        }
    </MCol>
    <MCol Md=6>
        <STextField @bind-Value="Dto.PostLogoutRedirectUri" Label="@T("PostLogoutRedirectUri")" Suffix="@logoutRedirectUriSuffix"
                          AppendOuterIcon="@IconConstants.Add" OnAppendOuterClick="AddLogoutRedirectUri" />
        @foreach (var uri in Dto.PostLogoutRedirectUris)
        {
            <div class="d-flex mt-3">
                <STextField Small HideDetails="true" Value="uri" Filled Disabled />
                <MIcon Class="ml-2" OnClick="()=>RemoveLogoutRedirectUri(uri)">mdi-close-circle</MIcon>
            </div>
        }
    </MCol>
</MRow>
<MRow>
    <MCol Md=12>
        <STextField @bind-Value="Dto.Description" Label="@T("Description")" />
    </MCol>
</MRow>

@code {
    [Parameter]
    public AddClientBasicDto Dto { get; set; } = new();

    [Parameter]
    public EventCallback<AddClientBasicDto> DtoChanged { get; set; }

    readonly string redirectUriSuffix = "/signin-oidc";
    readonly string logoutRedirectUriSuffix = "/signout-callback-oidc";

    private void AddCallBackRedirectUri()
    {
        if (!Uri.TryCreate(Dto.RedirectUri, UriKind.Absolute, out var uri))
        {
            PopupService.AlertAsync(T("Is not a valid URI address"), AlertTypes.Error);
            return;
        }
        var redirectUri = $"{Dto.RedirectUri.TrimEnd('/')}{redirectUriSuffix}".ToLower();
        if (Dto.RedirectUris.Contains(redirectUri))
        {
            PopupService.AlertAsync(T("Duplicate item"), AlertTypes.Error);
            return;
        }
        Dto.RedirectUris.Add(redirectUri);
        Dto.RedirectUri = string.Empty;
    }

    private void AddLogoutRedirectUri()
    {
        if (!Uri.TryCreate(Dto.PostLogoutRedirectUri, UriKind.Absolute, out var uri))
        {
            PopupService.AlertAsync(T("Is not a valid URI address"), AlertTypes.Error);
            return;
        }
        var postLogoutRedirectUri = $"{Dto.PostLogoutRedirectUri.TrimEnd('/')}{logoutRedirectUriSuffix}";
        if (Dto.PostLogoutRedirectUris.Contains(postLogoutRedirectUri))
        {
            PopupService.AlertAsync(T("Duplicate item"), AlertTypes.Error);
            return;
        }
        Dto.PostLogoutRedirectUris.Add(postLogoutRedirectUri);
        Dto.PostLogoutRedirectUri = string.Empty;
    }

    private void RemoveCallBackRedirectUri(string val)
    {
        Dto.RedirectUris.Remove(val);
    }

    private void RemoveLogoutRedirectUri(string val)
    {
        Dto.PostLogoutRedirectUris.Remove(val);
    }
}