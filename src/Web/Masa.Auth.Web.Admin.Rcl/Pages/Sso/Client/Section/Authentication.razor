@inherits AdminCompontentBase

<MRow Class="pt-4 mr-2">
    <MCol Md=12>
        <STextField @bind-Value="Dto.RedirectUri" Label="@T("CallBackRedirectUri")" Suffix="@redirectUriSuffix"
                    AppendOuterIcon="@IconConstants.Add" OnAppendOuterClick="AddCallBackRedirectUri" />
    </MCol>
    <MRow Class="ma-0">
        @foreach (var uri in Dto.RedirectUris)
        {
            <MCol Md=6 Class="d-flex">
                <STextField HideDetails="true" Value="uri" Filled Disabled Class="flex-grow-1" />
                <MIcon Class="ml-2" OnClick="()=>RemoveCallBackRedirectUri(uri)">mdi-close-circle</MIcon>
            </MCol>
        }
    </MRow>
    <MCol Md=12>
        <STextField @bind-Value="Dto.PostLogoutRedirectUri" Label="@T("PostLogoutRedirectUri")" Suffix="@logoutRedirectUriSuffix"
                    AppendOuterIcon="@IconConstants.Add" OnAppendOuterClick="AddLogoutRedirectUri" />
    </MCol>
    <MRow Class="ma-0">
        @foreach (var uri in Dto.PostLogoutRedirectUris)
        {
            <MCol Md=6 Class="d-flex">
                <STextField HideDetails="true" Value="uri" Filled Disabled />
                <MIcon Class="ml-2" OnClick="()=>RemoveLogoutRedirectUri(uri)">mdi-close-circle</MIcon>
            </MCol>
        }
    </MRow>
    <MCol Md=6>
        <STextField @bind-Value="Dto.FrontChannelLogoutUri" Label="@T("FrontChannelLogoutUri")" Tooltip="@T("FrontChannelLogoutUriTips")" />
    </MCol>
    <MCol Md=6>
        <SCheckbox @bind-Value="Dto.FrontChannelLogoutSessionRequired" Label="@T("FrontChannelLogoutSessionRequired")" Tooltip="@T("FrontChannelLogoutSessionRequiredTips")" />
    </MCol>
    <MCol Md=6>
        <STextField @bind-Value="Dto.BackChannelLogoutUri" Label="@T("BackChannelLogoutUri")" Tooltip="@T("BackChannelLogoutUriTips")" />
    </MCol>
    <MCol Md=6>
        <SCheckbox @bind-Value="Dto.BackChannelLogoutSessionRequired" Label="@T("BackChannelLogoutSessionRequired")" Tooltip="@T("FrontChannelLogoutSessionRequiredTips")" />
    </MCol>
    <MCol Md=6>
        <SNumberTextField @bind-Value="Dto.UserSsoLifetime" Label="@T("UserSsoLifetime")" Tooltip="@T("UserSsoLifetimeTips")" />
    </MCol>
    <MCol Md=6>
        <SCheckbox @bind-Value="Dto.EnableLocalLogin" Label="@T("EnableLocalLogin")" Tooltip="@T("EnableLocalLoginTips")" />
    </MCol>
    @*        <MCol Md=12>
    <STextField TValue="string" Label="IdentityProviderRestriction" />
    </MCol>*@
</MRow>

@code {

    [Parameter]
    public ClientAuthenticationDto Dto { get; set; } = new();

    [Parameter]
    public EventCallback<ClientAuthenticationDto> DtoChanged { get; set; }

    readonly string redirectUriSuffix = "/signin-oidc";
    readonly string logoutRedirectUriSuffix = "/signout-callback-oidc";

    private void AddCallBackRedirectUri()
    {
        if (!Uri.TryCreate(Dto.RedirectUri, UriKind.Absolute, out var uri))
        {
            PopupService.AlertAsync(T("Is not a valid URI address"), AlertTypes.Error);
            return;
        }
        var redirectUri = $"{Dto.RedirectUri.TrimEnd('/')}{redirectUriSuffix}".ToLower();
        if (Dto.RedirectUris.Contains(redirectUri))
        {
            PopupService.AlertAsync(T("Duplicate item"), AlertTypes.Error);
            return;
        }
        Dto.RedirectUris.Add(redirectUri);
        Dto.RedirectUri = string.Empty;
    }

    private void AddLogoutRedirectUri()
    {
        if (!Uri.TryCreate(Dto.PostLogoutRedirectUri, UriKind.Absolute, out var uri))
        {
            PopupService.AlertAsync(T("Is not a valid URI address"), AlertTypes.Error);
            return;
        }
        var postLogoutRedirectUri = $"{Dto.PostLogoutRedirectUri.TrimEnd('/')}{logoutRedirectUriSuffix}";
        if (Dto.PostLogoutRedirectUris.Contains(postLogoutRedirectUri))
        {
            PopupService.AlertAsync(T("Duplicate item"), AlertTypes.Error);
            return;
        }
        Dto.PostLogoutRedirectUris.Add(postLogoutRedirectUri);
        Dto.PostLogoutRedirectUri = string.Empty;
    }

    private void RemoveCallBackRedirectUri(string val)
    {
        Dto.RedirectUris.Remove(val);
    }

    private void RemoveLogoutRedirectUri(string val)
    {
        Dto.PostLogoutRedirectUris.Remove(val);
    }
}
