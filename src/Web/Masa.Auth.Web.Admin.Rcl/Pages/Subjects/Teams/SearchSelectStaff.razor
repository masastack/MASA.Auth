@inherits AdminCompontentBase

<MAutocomplete Value="Value" ValueChanged="ValueChanged"
               Items="_staffs"
               Loading="_staffLoading"
               OnSearchInputUpdate="QuerySelectionStaff"
               ItemText="r=>r.Name"
               ItemValue="r=>r.Id"
               Outlined
               Dense Class="@Class" Style="@Style"
               Chips HideDetails="true"
               SmallChips
               Label="@Label"
               Multiple>
    <SelectionContent Context="data">
        <MChip Close Small OnCloseClick="()=>RemoveAdmin(data.Item.Id)">
            @if (!string.IsNullOrEmpty(data.Item.Avatar))
            {
                <MAvatar Left>
                    <MImage Src="@data.Item.Avatar"></MImage>
                </MAvatar>
            }
            @data.Item.DisplayName
        </MChip>
    </SelectionContent>
    <ItemContent Context="data">
        @if (!string.IsNullOrEmpty(data.Item.Avatar))
        {
            <MListItemAvatar>
                <img src="@data.Item.Avatar">
            </MListItemAvatar>
        }
        <MListItemContent>
            <MListItemTitle>
                @(data.Item.Name)
            </MListItemTitle>
            <MListItemSubtitle>
                @(data.Item.JobNumber)
            </MListItemSubtitle>
        </MListItemContent>
    </ItemContent>
</MAutocomplete>

@code {

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public List<Guid> Value { get; set; } = new();

    [Parameter]
    public EventCallback<List<Guid>> ValueChanged { get; set; }

    bool _staffLoading;
    List<StaffSelectDto> _staffs = new List<StaffSelectDto>();

    StaffService StaffService => AuthCaller.StaffService;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Value.Any())
        {
            _staffs = await StaffService.SelectByIdsAsync(Value);
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void RemoveAdmin(Guid staffId)
    {
        var index = Value.IndexOf(staffId);
        if (index >= 0)
        {
            Value.RemoveAt(index);
        }
    }

    private async Task QuerySelectionStaff(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            return;
        }

        _staffLoading = true;
        _staffs = _staffs.Union(await StaffService.GetSelectAsync(search)).ToList();
        _staffLoading = false;
        StateHasChanged();
    }
}
