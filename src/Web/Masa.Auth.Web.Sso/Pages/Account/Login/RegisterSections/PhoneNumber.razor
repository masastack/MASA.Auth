@inherits SsoSectionComponentBase
@implements IDisposable

<MTextField PrependInnerIcon="mdi-cellphone" @bind-Value="Value.PhoneNumber" Label="@T("PhoneNumber")"
            Placeholder="@T("PhoneNumberPlaceHolder")" Outlined Autofocus Rules="_phoneNumberRules" @ref="_phoneTextField">
</MTextField>
<MTextField Class="mt-3" @bind-Value="Value.SmsCode" Outlined Label="@T("SMSCode")"
            Placeholder="@T("SMSCodePlaceHolder")" Type="number"
            NumberProps="@(prop=> { prop.Min = 100000; prop.Max = 999999; prop.HideControl = true; })">
    <AppendContent>
        <MButton Style="margin-top:-16px;margin-right:-12px;height:54px;min-width: 120px;"
                 Class="primary rounded-r-lg" Disabled=!_canSmsCode OnClick="GetSmsCode">
            @(_canSmsCode ? @T("GetSmsCode") : _smsCodeTime)
        </MButton>
    </AppendContent>
</MTextField>

@code {
    [Parameter]
    public RegisterInputModel Value { get; set; } = new();

    [Parameter]
    public EventCallback<RegisterInputModel> ValueChanged { get; set; }

    [Parameter]
    public bool Required { get; set; } = true;

    bool _canSmsCode = true;
    int _smsCodeTime = LoginOptions.GetSmsCodeInterval;
    System.Timers.Timer? _smsTimer;
    MTextField<string> _phoneTextField = null!;

    [Inject]
    public IAuthClient AuthClient { get; set; } = null!;

    private IEnumerable<Func<string, StringBoolean>> _phoneNumberRules => new List<Func<string, StringBoolean>>
    {
        value => !string.IsNullOrEmpty(value) ? true : "Required.",
        value => Regex.Match(value, LoginOptions.PhoneRegular).Success ? true : "Invalid PhoneNumber."
    };

    protected override void OnInitialized()
    {
        if (_smsTimer == null)
        {
            _smsTimer = new(1000 * 1);
            _smsTimer.Elapsed += SmsTimer_Elapsed;
        }
        base.OnInitialized();
    }

    private void SmsTimer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _ = InvokeAsync(() =>
        {
            _smsCodeTime--;
            if (_smsCodeTime == 0)
            {
                _smsTimer?.Stop();
                _canSmsCode = true;
                _smsCodeTime = LoginOptions.GetSmsCodeInterval;
            }
            StateHasChanged();
        });
    }

    private async Task GetSmsCode()
    {
        if (_phoneTextField.Validate())
        {
            await AuthClient.UserService.SendMsgCodeAsync(new SendMsgCodeModel
                {
                    SendMsgCodeType = SendMsgCodeTypes.Register,
                    PhoneNumber = Value.PhoneNumber
                });
            await PopupService.AlertAsync(T("The verification code is sent successfully, please enter the verification code within 60 seconds"), AlertTypes.Success);
            _canSmsCode = false;
            _smsTimer?.Start();
        }
    }

    public void Dispose()
    {
        _smsTimer?.Dispose();
    }
}
